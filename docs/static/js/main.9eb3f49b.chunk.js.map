{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","makeCalculations","toCalculate","state","display","join","displayResult","evaluate","setState","handleClick","e","value","target","document","getElementById","disabled","prevState","lastItem","slice","toString","includes","shift","length","console","log","handleDecimal","id","this","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9eb3f49b.chunk.js","sourcesContent":["import React from 'react';\nimport { evaluate } from 'mathjs'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      display: []\n    };\n  }\n\n  makeCalculations = () => {\n    // get what is displayed and joins\n    let toCalculate = this.state.display.join(\"\");\n    // use math to evaluate\n    let displayResult = evaluate(toCalculate);\n    // display result\n    if(displayResult) {\n      this.setState({\n        display: [displayResult]\n      })\n    }\n\n\n  };\n\n  handleClick = e => {\n    const value = e.target.value;\n\n    switch (value) {\n        // if clear is clicked, clear state\n      case \"clear\":\n        this.setState({\n          display: []\n        });\n        document.getElementById(\"decimal\").disabled = false;\n        break;\n        // if equals is clicked, make calculations\n      case \"equals\":\n        this.makeCalculations();\n        break;\n\n      // separation of case \"-\" so TC12 passes\n      case \"-\":\n        // re-enable decimal button \n        document.getElementById(\"decimal\").disabled = false;\n\n        this.setState(prevState => ({\n          display: [...prevState.display, value]\n        }));\n        break;\n        \n      // if operators are clicked succesively, use the last one (except subtraction)\n      case \"+\": \n      case \"*\":\n      case \"/\":\n        const lastItem = this.state.display.slice(-1).toString();\n        const operators = [\"+\", \"-\", \"*\", \"/\"];\n        // re-enable decimal button \n        document.getElementById(\"decimal\").disabled = false;\n\n        operators.includes(lastItem)\n          ? this.setState(prevState => ({\n              // replace previous operator with the current operator\n              display: [...prevState.display.shift(), value]\n            }))\n          : this.setState(prevState => ({\n              display: [...prevState.display, value]\n            }));\n        break;\n\n      default:\n        // TC10 - prevent number from starting with multiple 0 0 0\n        if (this.state.display.length === 0 && value == 0) {\n          console.log('')\n        } else {\n          this.setState(prevState => ({\n            display: [...prevState.display, value]\n          }));\n        }\n\n    }\n  };\n\n  handleDecimal = e => {\n    // prevent from adding a second decimal to the same number by disabling\n    // decimal button until clear or operators are pressed\n    document.getElementById(\"decimal\").disabled = true;\n    // accept floats starting with 0\n    if (this.state.display.length === 0) {\n      this.setState({\n        display: [\"0.\"]\n      });\n    } else {\n      this.handleClick(e);\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"calculator\">\n        {/* if list is empty, display 0, else display list content */}\n        <div id=\"display\">\n          {this.state.display.length === 0\n            ? this.state.display.length\n            : this.state.display}\n        </div>\n        <button id=\"equals\" onClick={this.handleClick} value=\"equals\">\n          =\n        </button>\n        <button id=\"zero\" onClick={this.handleClick} value=\"0\">\n          0\n        </button>\n        <button id=\"one\" onClick={this.handleClick} value=\"1\">\n          1\n        </button>\n        <button id=\"two\" onClick={this.handleClick} value=\"2\">\n          2\n        </button>\n        <button id=\"three\" onClick={this.handleClick} value=\"3\">\n          3\n        </button>\n        <button id=\"four\" onClick={this.handleClick} value=\"4\">\n          4\n        </button>\n        <button id=\"five\" onClick={this.handleClick} value=\"5\">\n          5\n        </button>\n        <button id=\"six\" onClick={this.handleClick} value=\"6\">\n          6\n        </button>\n        <button id=\"seven\" onClick={this.handleClick} value=\"7\">\n          7\n        </button>\n        <button id=\"eight\" onClick={this.handleClick} value=\"8\">\n          8\n        </button>\n        <button id=\"nine\" onClick={this.handleClick} value=\"9\">\n          9\n        </button>\n        <button id=\"add\" onClick={this.handleClick} value=\"+\">\n          +\n        </button>\n        <button id=\"subtract\" onClick={this.handleClick} value=\"-\">\n          -\n        </button>\n        <button id=\"multiply\" onClick={this.handleClick} value=\"*\">\n          *\n        </button>\n        <button id=\"divide\" onClick={this.handleClick} value=\"/\">\n          /\n        </button>\n        <button id=\"decimal\" onClick={this.handleDecimal} value=\".\">\n          .\n        </button>\n        <button id=\"clear\" onClick={this.handleClick} value=\"clear\">\n          CLEAR\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}